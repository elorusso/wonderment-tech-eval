package main_test

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"testing"
	"time"
)

const (
	baseURL    = "https://9g5uy9q9dc.execute-api.us-east-1.amazonaws.com"
	ingestPath = "ingest-shipment"
)

var testCodes map[string][]string = map[string][]string{
	"ups": {
		"1Z8995V60312565703",
		"1Z7939FF0325784213",
		"1Z7939FF0336857169",
		"1Z7939FF0331095974",
		"1Z7939FF0318912883",
		"1ZEW11070297619158",
		"1Z8995V60330436201",
		"1Z8995V60316403291",
		"1Z8995V60307878877",
		"1Z8995V60334886334",
		"1ZEW11070295047618",
		"1Z8995V60327643734",
		"1Z7939FF3614420627",
		"1Z7939FF0332193062",
		"1ZEW11070292129204",
		"1ZEW11070298398752",
		"1Z8995V60302073610",
		"1Z8995V60335520217",
		"1Z8995V60304945406",
		"1ZEW11070294070657",
		"1Z7939FF0301545936",
		"1Z7939FF0332127633",
		"1Z8995V60330801575",
		"1Z8995V60336173083",
		"1Z8995V60329597924",
		"1ZEW11070296162947",
		"1ZEW11070292979359",
		"1Z8995V60335044296",
		"1Z8995V60322387628",
		"1Z8995V60306111562",
		"1ZX92R160301491530",
		"1ZX92R160339061371",
		"1ZEW11070297283136",
		"1ZEW11070294665621",
		"1ZX92R160323602986",
		"1ZX92R160320946745",
		"1ZX92R160334172359",
		"1ZX92R160338931165",
		"1ZEW11070298439216",
		"1ZX92R160325763184",
		"1Z8995V60316641677",
		"1Z7939FF0334498846",
		"1Z7939FF0320126951",
		"1ZX92R160323797099",
		"1ZX92R160327196990",
		"1ZEW11070297769255",
		"1ZX92R160333660118",
		"1ZX92R160333089924",
		"1ZE8E8170316211954",
		"1ZX92R160300161184",
	},
	"usps": {
		"9405511202555478899782",
		"9400111202555478330916",
		"9400111202555478330756",
		"9400111202555478330015",
		"9400111202555478338264",
		"9374869903506066338485",
		"9400111202555478394727",
		"9400111202555419005378",
		"9374869903506055188084",
		"9405511699000140201797",
		"9405511699000148484444",
		"9400111899223817576195",
		"9400111899223817576140",
		"9374869903506078782313",
		"9400111202435825743548",
		"9400111202555478393003",
		"9400111202555439275652",
		"9400111202435825743432",
		"9400111202555478393430",
		"9400111202555478338653",
		"9374869903506058790376",
		"9374869903506058850865",
		"9405511202435825744463",
		"9361269903506062547557",
		"9374869903506056285492",
		"9400111202435825745566",
		"9374869903506059135299",
		"9400111202555478836333",
		"9405511699000199993957",
		"9400111202555478860352",
		"9374869903506079649073",
		"9374869903506063920515",
		"9361269903506055837474",
		"92001901755477000454468833",
		"LZ560920614US",
		"9374869903506055116209",
		"92001901755477000454462602",
		"9374869903506058871693",
		"9449011202435825734012",
		"9374869903506059156034",
		"9374869903506058856768",
		"9374869903506063265470",
		"9374869903506068015995",
		"9361269903506060605105",
		"9405511699000140739641",
		"9400111202435825734751",
		"9374869903506058888967",
		"9374869903506054116361",
		"9400111699000148825206",
		"9400111202563825773774",
	},
	"fedex": {
		"781911664789",
		"781912104385",
		"781903802700",
		"781911030865",
		"781937849589",
		"781899675120",
		"781940537664",
		"781942009983",
		"781937860388",
		"781937884341",
		"781911957888",
		"781937951743",
		"781938027409",
		"781913478370",
		"781911460674",
		"781910989350",
		"781912112122",
		"781984233957",
		"781912058029",
		"781934275503",
		"781884499416",
		"781985006336",
		"781924089639",
		"61290986580620629730",
		"781912292291",
		"781912000755",
		"781909164822",
		"781912070177",
		"781984850533",
		"781911659047",
		"781924112078",
		"781924093539",
		"781912082126",
		"781911977158",
		"781911870323",
		"781911637237",
		"781911794843",
		"781912004691",
		"781902394561",
		"781913900550",
		"781898334640",
		"781903177077",
		"782040078353",
		"781897186197",
		"781897318122",
		"781896746815",
		"781914410315",
		"781914579332",
		"781903280580",
		"781903243185",
	},
}

func TestIngest(t *testing.T) {
	var totalTime time.Duration
	count := 0
	for carrier, codes := range testCodes {
		for _, code := range codes {
			startTime := time.Now()
			count++

			err := ingest(carrier, code)
			if err != nil {
				t.Error(err)
			}

			totalTime += time.Now().Sub(startTime)
		}
	}

	averageTime := time.Duration(int(totalTime) / count)
	fmt.Printf("Average Execution Time: %s\n", averageTime)
}

func ingest(carrier string, trackingCode string) error {

	baseURL, _ := url.Parse(baseURL)
	baseURL.Path = ingestPath

	params := url.Values{}
	params.Add("carrier", carrier)
	params.Add("tracking_code", trackingCode)

	baseURL.RawQuery = params.Encode()

	resp, err := http.Post(baseURL.String(), "", nil)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return errors.New("HTTP status not OK")
	}

	return nil
}
